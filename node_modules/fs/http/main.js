const http = require('http');
const fs = require('fs');
const url = require('url');

const PORT = 3000;

const server = http.createServer((req, res) => {
  const parsedUrl = url.parse(req.url, true);
  const method = req.method;
  const pathname = parsedUrl.pathname;

  // Read the database file
  fs.readFile('adb.json', 'utf8', (err, data) => {
    if (err) {
      res.writeHead(500, {'Content-Type': 'application/json'});
      res.end(JSON.stringify({message: 'Error reading database'}));
      return;
    }

    let db = JSON.parse(data);

    // GET method: fetch all data
    if (method === 'GET' && pathname === '/data') {
      res.writeHead(200, {'Content-Type': 'application/json'});
      res.end(JSON.stringify(db));
    }

    // POST method: add new data
    else if (method === 'POST' && pathname === '/data') {
      let body = '';
      req.on('data', chunk => {
        body += chunk.toString();
      });
      req.on('end', () => {
        const newItem = JSON.parse(body);
        newItem.id = db.length ? db[db.length - 1].id + 1 : 1;
        db.push(newItem);

        fs.writeFile('adb.json', JSON.stringify(db, null, 2), (err) => {
          if (err) {
            res.writeHead(500, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({message: 'Error writing database'}));
            return;
          }
          res.writeHead(201, {'Content-Type': 'application/json'});
          res.end(JSON.stringify(newItem));
        });
      });
    }

    // PUT method: update data by id
    else if (method === 'PUT' && pathname.startsWith('/data/')) {
      const id = parseInt(pathname.split('/')[2]);
      let body = '';
      req.on('data', chunk => {
        body += chunk.toString();
      });
      req.on('end', () => {
        const updatedItem = JSON.parse(body);
        let index = db.findIndex(item => item.id === id);
        if (index !== -1) {
          db[index] = {...db[index], ...updatedItem};

          fs.writeFile('adb.json', JSON.stringify(db, null, 2), (err) => {
            if (err) {
              res.writeHead(500, {'Content-Type': 'application/json'});
              res.end(JSON.stringify({message: 'Error writing database'}));
              return;
            }
            res.writeHead(200, {'Content-Type': 'application/json'});
            res.end(JSON.stringify(db[index]));
          });
        } else {
          res.writeHead(404, {'Content-Type': 'application/json'});
          res.end(JSON.stringify({message: 'Data not found'}));
        }
      });
    }

    // DELETE method: delete data by id
    else if (method === 'DELETE' && pathname.startsWith('/data/')) {
      const id = parseInt(pathname.split('/')[2]);
      const index = db.findIndex(item => item.id === id);
      if (index !== -1) {
        const deletedItem = db.splice(index, 1);

        fs.writeFile('adb.json', JSON.stringify(db, null, 2), (err) => {
          if (err) {
            res.writeHead(500, {'Content-Type': 'application/json'});
            res.end(JSON.stringify({message: 'Error writing database'}));
            return;
          }
          res.writeHead(200, {'Content-Type': 'application/json'});
          res.end(JSON.stringify(deletedItem[0]));
        });
      } else {
        res.writeHead(404, {'Content-Type': 'application/json'});
        res.end(JSON.stringify({message: 'Data not found'}));
      }
    }

    // Invalid route
    else {
      res.writeHead(404, {'Content-Type': 'application/json'});
      res.end(JSON.stringify({message: 'Route not found'}));
    }
  });
});

server.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
});
